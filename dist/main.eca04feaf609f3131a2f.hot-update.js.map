{"version":3,"sources":["webpack://The-movie-db-store/./src/store/index.js"],"names":["initialState","middlewares","ReduxPromise","thunk","process","push","logger","enhancers","devToolExtension","window","devToolsExtension","isFunction","composedEnhancers","compose","applyMiddleware","Store","store","getState","createStore","reducers","console","log","sessionStorage","getStore"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKA;AACA;AACA;AAEA;AAEA,IAAMA,YAAY,GAAG,EAArB;;AAEA,IAAMC,WAAW,GAAG,uBAAM;AACxB,MAAMA,WAAW,GAAG,CAClBC,oDADkB,EAElBC,mDAFkB,CAApB;;AAKA,MAAIC,IAAJ,EAA4C;AAC1CH,eAAW,CAACI,IAAZ,CAAiBC,mDAAjB;AACD;;AAED,SAAOL,WAAP;AACD,CAXD;;AAaA,IAAMM,SAAS,GAAG,qBAAM;AACtB,MAAMA,SAAS,GAAG,EAAlB;AACA,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,iBAAhC;;AAEA,MACEN,aAAA,KAAyB,aAAzB,IAEAO,4DAAU,CAACH,gBAAD,CAHZ,EAIE;AACAD,aAAS,CAACF,IAAV,CAAeG,gBAAgB,EAA/B;AACD;;AAED,SAAOD,SAAP;AACD,CAbD;;AAeA,IAAMK,iBAAiB,GAAGC,6CAAO,MAAP,UACxBC,qDAAe,MAAf,4BAAmBb,WAAW,EAA9B,EADwB,4BAErBM,SAAS,EAFY,GAA1B;;IAKMQ,K,GACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAAA,oCAIR,YAAM;AACf,WAAO,KAAI,CAACA,KAAL,CAAWC,QAAX,EAAP;AACD,GANkB;;AAAA,oCAQR,YAAM;AACf,WAAO,KAAI,CAACD,KAAZ;AACD,GAVkB;;AACjB,OAAKA,KAAL,GAAaA,KAAb;AACD,C;;AAWH,IAAMA,KAAK,GAAG,IAAID,KAAJ,CACZG,yDAAW,CACTC,iDADS,EAETnB,YAFS,EAGTY,iBAHS,CADC,CAAd;AAQAQ,OAAO,CAACC,GAAR,CAAYC,cAAZ,E,CAEA;;AACeN,oEAAK,CAACO,QAAN,EAAf,E","file":"main.eca04feaf609f3131a2f.hot-update.js","sourcesContent":["import { isFunction } from 'lodash-es'\nimport { \n  applyMiddleware, \n  compose,\n  createStore\n} from 'redux'\nimport logger from 'redux-logger'\nimport ReduxPromise from 'redux-promise'\nimport thunk from 'redux-thunk'\n\nimport reducers from './reducers'\n\nconst initialState = {}\n\nconst middlewares = () => {\n  const middlewares = [\n    ReduxPromise,\n    thunk\n  ]\n\n  if (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger)\n  }\n\n  return middlewares\n}\n\nconst enhancers = () => {\n  const enhancers = []\n  const devToolExtension = window.devToolsExtension\n\n  if (\n    process.env.NODE_ENV === 'development' \n    &&\n    isFunction(devToolExtension)\n  ) {\n    enhancers.push(devToolExtension())\n  }\n\n  return enhancers\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middlewares()),\n  ...enhancers()\n)\n\nclass Store {\n  constructor(store) {\n    this.store = store\n  }\n\n  getState = () => {\n    return this.store.getState()\n  }\n\n  getStore = () => {\n    return this.store\n  }\n}\n\nconst store = new Store(\n  createStore(\n    reducers, \n    initialState, \n    composedEnhancers\n  )\n)\n\nconsole.log(sessionStorage)\n\n// exporting one instance of the store only\nexport default store.getStore()"],"sourceRoot":""}